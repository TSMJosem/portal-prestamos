/**
 * reportes-loader.js - Cargador para los m√≥dulos de reportes y exportaci√≥n
 * 
 * Este script carga todos los m√≥dulos necesarios para el funcionamiento
 * del sistema de reportes y la exportaci√≥n.
 */

document.addEventListener('DOMContentLoaded', function() {
    console.log('üìä Inicializando sistema de reportes y exportaci√≥n...');
    
    // Verificar si estamos en la p√°gina de reportes
    const esReportesPage = window.location.href.includes('reportes') || 
                           document.getElementById('reportes')?.classList.contains('active');
    
    if (!esReportesPage) {
        console.log('No estamos en la p√°gina de reportes, omitiendo inicializaci√≥n');
        return;
    }
    
    // Cargar funcionalidades espec√≠ficas
    cargarModulosReportes();
});

// Cargar todos los m√≥dulos necesarios para reportes
function cargarModulosReportes() {
    // Lista de m√≥dulos a cargar
    const modulos = [
        { 
            nombre: 'Funcionalidad principal de reportes', 
            url: '/js/reportes.js', 
            callback: function() {
                // Inicializar p√°gina de reportes si existe la funci√≥n
                if (typeof window.initReportesPage === 'function') {
                    window.initReportesPage();
                }
            }
        },
        { 
            nombre: 'Funcionalidad de exportaci√≥n', 
            url: '/js/reportes-export.js', 
            callback: null
        },
        { 
            nombre: 'Integraci√≥n de reportes', 
            url: '/js/reportes-integration.js', 
            callback: null
        }
    ];
    
    // Cargar cada m√≥dulo
    let modulosCargados = 0;
    
    modulos.forEach(modulo => {
        // Verificar si el script ya est√° cargado
        const scriptExistente = document.querySelector(`script[src="${modulo.url}"]`);
        
        if (scriptExistente) {
            console.log(`‚úÖ M√≥dulo "${modulo.nombre}" ya est√° cargado`);
            modulosCargados++;
            
            // Si todos los m√≥dulos est√°n cargados, ejecutar callbacks
            if (modulosCargados === modulos.length) {
                ejecutarCallbacks(modulos);
            }
            return;
        }
        
        // Cargar script
        const script = document.createElement('script');
        script.src = modulo.url;
        script.async = true;
        
        script.onload = () => {
            console.log(`‚úÖ M√≥dulo "${modulo.nombre}" cargado correctamente`);
            modulosCargados++;
            
            // Si todos los m√≥dulos est√°n cargados, ejecutar callbacks
            if (modulosCargados === modulos.length) {
                ejecutarCallbacks(modulos);
            }
        };
        
        script.onerror = (error) => {
            console.error(`‚ùå Error al cargar m√≥dulo "${modulo.nombre}":`, error);
            modulosCargados++;
            
            // Si todos los m√≥dulos est√°n cargados, ejecutar callbacks
            if (modulosCargados === modulos.length) {
                ejecutarCallbacks(modulos);
            }
        };
        
        document.head.appendChild(script);
    });
}

// Ejecutar callbacks cuando todos los m√≥dulos est√©n cargados
function ejecutarCallbacks(modulos) {
    console.log('üöÄ Todos los m√≥dulos de reportes cargados, ejecutando callbacks...');
    
    // Ejecutar callbacks en orden
    modulos.forEach(modulo => {
        if (modulo.callback && typeof modulo.callback === 'function') {
            try {
                modulo.callback();
            } catch (error) {
                console.error(`Error al ejecutar callback para "${modulo.nombre}":`, error);
            }
        }
    });
    
    // C√≥digo adicional cuando todos los m√≥dulos est√©n listos
    console.log('‚úÖ Sistema de reportes inicializado correctamente');
    
    // Mostrar notificaci√≥n de que el sistema est√° listo
    if (typeof showNotification === 'function') {
        showNotification('Sistema de reportes listo', 'info');
    }
}